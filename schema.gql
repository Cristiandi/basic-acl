# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ApiKey {
  alias: String
  company: Company!
  createdAt: DateTime!
  id: Float!
  uid: String!
  updatedAt: DateTime!
  value: String!
}

type Company {
  accessKey: String!
  apiKeys: [ApiKey!]!
  createdAt: DateTime!
  firebaseAdminConfig: JSONObject
  firebaseConfig: JSONObject
  id: Float!
  name: String!
  projects: [Project!]!
  roles: [Role!]!
  uid: String!
  updatedAt: DateTime!
  users: [User!]!
}

input CreateApiKeyInput {
  alias: String
  companyUid: String!
}

input CreateCompanyInput {
  firebaseAdminConfig: JSONObject!
  firebaseConfig: JSONObject!
  name: String!
}

input CreateProjectInput {
  code: String!
  companyUid: String!
  description: String
  name: String!
}

input CreateRoleInput {
  code: String!
  companyUid: String!
  description: String
  name: String!
}

input CreateUserInput {
  authUid: String
  companyUid: String!
  email: String
  password: String
  phone: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetAllApiKeysInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllProjectsInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllRolesInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllUsersInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetOneApiKeyInput {
  uid: String!
}

input GetOneCompanyInput {
  uid: String!
}

input GetOneProjectInput {
  uid: String!
}

input GetOneRoleInput {
  uid: String!
}

input GetOneUserInput {
  authUid: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createApiKey(createApiKeyInput: CreateApiKeyInput!): ApiKey!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createUser(createUserInput: CreateUserInput!): User!
  daleteCompany(getOneCompanyInput: GetOneCompanyInput!): Company!
  deleteApiKey(getOneApiKeyInput: GetOneApiKeyInput!): ApiKey!
  deleteProject(getOneProjectInput: GetOneProjectInput!): Project!
  deleteRole(getOneRoleInput: GetOneRoleInput!): Role!
  deleteUser(getOneUserInput: GetOneUserInput!): User!
  updateApiKey(getOneApiKeyInput: GetOneApiKeyInput!, updateApiKeyInput: UpdateApiKeyInput!): ApiKey!
  updateCompany(getOneCompanyInput: GetOneCompanyInput!, updateCompanyInput: UpdateCompanyInput!): Company!
  updateProject(getOneProjectInput: GetOneProjectInput!, updateProjectInput: UpdateProjectInput!): Project!
  updateRole(getOneRoleInput: GetOneRoleInput!, updateRoleInput: UpdateRoleInput!): Role!
}

type Project {
  code: String!
  company: Company!
  createdAt: DateTime!
  description: String
  id: Float!
  name: String!
  uid: String!
  updatedAt: DateTime!
}

type Query {
  getAllApiKeys(getAllApiKeysInput: GetAllApiKeysInput!): [ApiKey!]!
  getAllProjects(getProjectsInput: GetAllProjectsInput!): [Project!]
  getAllRoles(getRolesInput: GetAllRolesInput!): [Role!]!
  getAllUsers(getAllUsersInput: GetAllUsersInput!): [User!]!
  getCompany(getOneCompanyInput: GetOneCompanyInput!): Company
  getOneApiKey(getOneApiKeyInput: GetOneApiKeyInput!): ApiKey
  getOneProject(getOneProjectInput: GetOneProjectInput!): Project
  getOneRole(getOneRoleInput: GetOneRoleInput!): Role
  getOneUser(getOneUserInput: GetOneUserInput!): User
  sayHello: String!
}

type Role {
  code: String!
  company: Company!
  createdAt: DateTime!
  description: String
  id: Float!
  name: String!
  uid: String!
  updatedAt: DateTime!
}

input UpdateApiKeyInput {
  alias: String
  companyUid: String
}

input UpdateCompanyInput {
  firebaseAdminConfig: JSONObject
  firebaseConfig: JSONObject
  name: String
}

input UpdateProjectInput {
  code: String
  companyUid: String
  description: String
  name: String
}

input UpdateRoleInput {
  code: String
  companyUid: String
  description: String
  name: String
}

type User {
  authUid: String!
  company: Company!
  createdAt: DateTime!
  email: String
  id: Float!
  phone: String
  updatedAt: DateTime!
}
