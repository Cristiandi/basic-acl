# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ApiKey {
  alias: String
  company: Company!
  createdAt: DateTime!
  id: Float!
  permissions: [Permission!]!
  uid: String!
  updatedAt: DateTime!
  value: String!
}

input AssignUserRoleInput {
  companyUid: String
  roleCode: String
  roleUid: String
  userAuthUid: String!
}

type AssignedRole {
  createdAt: DateTime!
  id: Float!
  role: Role!
  updatedAt: DateTime!
  user: User!
}

input ChangeUserEmailInput {
  """uid from firebase"""
  authUid: String!

  """new email address"""
  email: String!

  """custom parameters for CONFIRMATION_EMAIL"""
  emailTemplateParams: JSONObject
}

input ChangeUserPasswordInput {
  authUid: String!
  emailTemplateParams: JSONObject
  newPassword: String!
  oldPassword: String!
}

input ChangeUserPhoneInput {
  authUid: String!
  phone: String!
}

input CheckPermissionInput {
  apiKey: String
  companyUid: String!
  permissionName: String!
  token: String
}

type Company {
  accessKey: String
  apiKeys: [ApiKey!]!
  createdAt: DateTime!
  firebaseAdminConfig: JSONObject
  firebaseConfig: JSONObject
  id: Float!
  name: String!
  roles: [Role!]!
  uid: String!
  updatedAt: DateTime!
  users: [User!]!
  website: String
}

input CreateApiKeyInput {
  alias: String
  companyUid: String!
}

input CreateAssignedRoleInput {
  roleUid: String!
  userUid: String!
}

input CreateCompanyInput {
  firebaseAdminConfig: JSONObject!
  firebaseConfig: JSONObject!
  name: String!
  website: String
}

input CreateEmailTemplateInput {
  companyUid: String!
  subject: String!
  type: String!
}

input CreatePermissionInput {
  apiKeyUid: String
  name: String!
  roleUid: String
}

input CreateRoleInput {
  code: String!
  companyUid: String!
  description: String
  name: String!
}

input CreateSuperAdmiUserInput {
  """uid of the owner company."""
  companyUid: String!
  email: String!
  password: String!
  phone: String!
}

input CreateUserInput {
  """uid of the user in firebase."""
  authUid: String

  """uid of the owner company."""
  companyUid: String!
  email: String
  emailTemplateParams: JSONObject
  password: String
  phone: String
  roleCode: String
  sendEmail: Boolean
}

input CreateUsersFromFirebaseInput {
  companyUid: String!
  roleCode: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EmailTemplate {
  company: Company!
  createdAt: DateTime!
  id: Float!
  subject: String!
  type: String!
  uid: String!
  updatedAt: DateTime!
}

input GetAllApiKeysInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllAssignedRolesInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllEmailTemplatesInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllPermissionsInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllRolesInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetAllUsersInput {
  companyUid: String!
  limit: Int
  q: String
  skip: Int
}

input GetOneApiKeyInput {
  uid: String!
}

input GetOneCompanyInput {
  uid: String!
}

input GetOneEmailTemplateInput {
  uid: String!
}

input GetOnePermissionInput {
  uid: String!
}

input GetOneRoleInput {
  uid: String!
}

input GetOneUserInput {
  authUid: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginSuperAdminInput {
  companyUid: String!
  email: String!
  password: String!
}

type LoginSuperAdminOutput {
  accessKey: String!
  authTime: String!
  companyUid: String!
  expirationTime: String!
  issuedAtTime: String!
  token: String!
}

type Mutation {
  assignUserRole(assignUserRoleInput: AssignUserRoleInput!): User!
  changeUserEmail(changeUserEmailInput: ChangeUserEmailInput!): User!
  changeUserPassword(changeUserPasswordInput: ChangeUserPasswordInput!): User!
  changeUserPhone(changeUserPhoneInput: ChangeUserPhoneInput!): User!
  createApiKey(createApiKeyInput: CreateApiKeyInput!): ApiKey!
  createAssignedRole(createAssignedRoleInput: CreateAssignedRoleInput!): AssignedRole!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  createEmailTemplate(createEmailTemplateInput: CreateEmailTemplateInput!): EmailTemplate!
  createPermission(createPermissionInput: CreatePermissionInput!): Permission!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createSuperAdmin(createSuperAdmiUserInput: CreateSuperAdmiUserInput!): User!
  createUser(createUserInput: CreateUserInput!): User!
  createUsersFromFirebase(createUsersFromFirebaseInput: CreateUsersFromFirebaseInput!): VoidOutput!
  daleteCompany(getOneCompanyInput: GetOneCompanyInput!): Company!
  deleteApiKey(getOneApiKeyInput: GetOneApiKeyInput!): ApiKey!
  deleteAssignedRole(deleteAssignedRoleInput: CreateAssignedRoleInput!): AssignedRole!
  deleteEmailTemplate(getOneEmailTemplateInput: GetOneEmailTemplateInput!): EmailTemplate!
  deletePermission(getOnePermissionInput: GetOnePermissionInput!): Permission!
  deleteRole(getOneRoleInput: GetOneRoleInput!): Role!
  deleteUser(getOneUserInput: GetOneUserInput!): User!
  loginSuperAdmin(loginSuperAdminInput: LoginSuperAdminInput!): LoginSuperAdminOutput!
  previewEmailTemplate(getOneEmailTemplateInput: GetOneEmailTemplateInput!, previewEmailTemplateInput: PreviewEmailTemplateInput!): PreviewEmailTemplateOutput!
  resetUserPassword(resetUserPasswordInput: ResetUserPasswordInput!): ResetUserPasswordOutput!
  sendConfirmationUserEmail(getOneUserInput: GetOneUserInput!, sendUserConfirmationEmailInput: SendUserConfirmationEmailInput!): VoidOutput!
  sendResetUserPasswordEmail(sendResetUserPasswordEmailInput: SendResetUserPasswordEmailInput!): VoidOutput!
  sendSuperAdminConfirmationEmail(getOneUserInput: GetOneUserInput!): VoidOutput!
  updateApiKey(getOneApiKeyInput: GetOneApiKeyInput!, updateApiKeyInput: UpdateApiKeyInput!): ApiKey!
  updateCompany(getOneCompanyInput: GetOneCompanyInput!, updateCompanyInput: UpdateCompanyInput!): Company!
  updateEmailTemplate(getOneEmailTemplateInput: GetOneEmailTemplateInput!, updateCompanyInput: UpdateEmailTemplateInput!): EmailTemplate!
  updatePermission(getOnePermissionInput: GetOnePermissionInput!, updatePermissionInput: UpdatePermissionInput!): Permission!
  updateRole(getOneRoleInput: GetOneRoleInput!, updateRoleInput: UpdateRoleInput!): Role!
  uploadEmailTemplate(file: Upload!, getOneEmailTemplateInput: GetOneEmailTemplateInput!): EmailTemplate!
}

type Permission {
  allowed: Boolean!
  apiKey: ApiKey
  createdAt: DateTime!
  id: Float!
  name: String!
  role: Role
  uid: String!
  updatedAt: DateTime!
}

input PreviewEmailTemplateInput {
  parameters: JSONObject
}

type PreviewEmailTemplateOutput {
  html: String!
}

type Query {
  checkPermission(checkPermissionInput: CheckPermissionInput!): Permission
  getAllApiKeys(getAllApiKeysInput: GetAllApiKeysInput!): [ApiKey!]!
  getAllAssignedRoles(getAllAssignedRolesInput: GetAllAssignedRolesInput!): [AssignedRole!]!
  getAllEmailTemplates(getAllEmailTemplatesInput: GetAllEmailTemplatesInput!): [EmailTemplate!]!
  getAllPermissions(getPermissionsInput: GetAllPermissionsInput!): [Permission!]
  getAllRoles(getRolesInput: GetAllRolesInput!): [Role!]!
  getAllUsers(getAllUsersInput: GetAllUsersInput!): [User!]!
  getCompany(getOneCompanyInput: GetOneCompanyInput!): Company
  getOneApiKey(getOneApiKeyInput: GetOneApiKeyInput!): ApiKey
  getOnePermission(fetOnePermissionInput: GetOnePermissionInput!): Permission
  getOneRole(getOneRoleInput: GetOneRoleInput!): Role
  getOneUser(getOneUserInput: GetOneUserInput!): User
  sayHello: String!
}

input ResetUserPasswordInput {
  code: String!
  emailTemplateParams: JSONObject
  password: String!
}

type ResetUserPasswordOutput {
  url: String!
}

type Role {
  assignedRoles: [AssignedRole!]!
  code: String!
  company: Company!
  createdAt: DateTime!
  description: String
  id: Float!
  name: String!
  permissions: [Permission!]!
  uid: String!
  updatedAt: DateTime!
}

input SendResetUserPasswordEmailInput {
  companyUid: String!
  email: String!
  emailTemplateParams: JSONObject
}

input SendUserConfirmationEmailInput {
  emailTemplateParams: JSONObject
}

input UpdateApiKeyInput {
  alias: String
  companyUid: String
}

input UpdateCompanyInput {
  firebaseAdminConfig: JSONObject
  firebaseConfig: JSONObject
  name: String
  website: String
}

input UpdateEmailTemplateInput {
  companyUid: String
  subject: String
  type: String
}

input UpdatePermissionInput {
  apiKeyUid: String
  name: String
  roleUid: String
}

input UpdateRoleInput {
  code: String
  companyUid: String
  description: String
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  assignedRoles: [AssignedRole!]!
  authUid: String!
  company: Company!
  createdAt: DateTime!
  email: String
  id: Float!
  phone: String
  updatedAt: DateTime!
  verificationCodes: [VerificationCode!]!
}

type VerificationCode {
  code: String!
  createdAt: DateTime!
  id: Float!
  type: String!
  uid: String!
  updatedAt: DateTime!
  user: User!
}

type VoidOutput {
  message: String!
}
